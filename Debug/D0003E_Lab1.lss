
D0003E_Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000951  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084a  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000273  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e4       	ldi	r30, 0x4C	; 76
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 99 00 	call	0x132	; 0x132 <main>
  82:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <writeChar>:
#include <stdint.h>


//Will write the Char on the screen as position pos.
writeChar(char ch, int pos)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	64 97       	sbiw	r28, 0x14	; 20
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
	// Writes a char ch on position pos on the lcd
	char mask = 0x00;
	char lcddr = 0xEC;
	uint16_t SCCTable[10] =  {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  9e:	94 e1       	ldi	r25, 0x14	; 20
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f1 e0       	ldi	r31, 0x01	; 1
  a4:	de 01       	movw	r26, r28
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	9a 95       	dec	r25
  ae:	e1 f7       	brne	.-8      	; 0xa8 <writeChar+0x1e>
	uint16_t sccChar = 0x0000;
	char nibble = 0x00;
	int8_t number = 0;
	
	// checks if ch is in 0..9
	if (isdigit(ch)) {
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	20 53       	subi	r18, 0x30	; 48
  b6:	31 09       	sbc	r19, r1
  b8:	2a 30       	cpi	r18, 0x0A	; 10
  ba:	31 05       	cpc	r19, r1
  bc:	18 f4       	brcc	.+6      	; 0xc4 <writeChar+0x3a>
		number = ch - '0';
  be:	e0 ed       	ldi	r30, 0xD0	; 208
  c0:	e8 0f       	add	r30, r24
  c2:	03 c0       	rjmp	.+6      	; 0xca <writeChar+0x40>
		} else if (ch <= 9 && ch >= 0) {
  c4:	8a 30       	cpi	r24, 0x0A	; 10
  c6:	60 f5       	brcc	.+88     	; 0x120 <writeChar+0x96>
		number = ch;
  c8:	e8 2f       	mov	r30, r24
	
	// get the scc value from our scc table
	sccChar = SCCTable[number];
	
	// decides which mask is used depending on if the desired position is even or not
	if (pos % 2 == 0) {
  ca:	cb 01       	movw	r24, r22
  cc:	9b 01       	movw	r18, r22
  ce:	21 70       	andi	r18, 0x01	; 1
  d0:	33 27       	eor	r19, r19
  d2:	60 ff       	sbrs	r22, 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <writeChar+0x50>
		mask = 0xF0;
		} else {
		mask = 0x0F;
  d6:	af e0       	ldi	r26, 0x0F	; 15
  d8:	01 c0       	rjmp	.+2      	; 0xdc <writeChar+0x52>
	// get the scc value from our scc table
	sccChar = SCCTable[number];
	
	// decides which mask is used depending on if the desired position is even or not
	if (pos % 2 == 0) {
		mask = 0xF0;
  da:	a0 ef       	ldi	r26, 0xF0	; 240
		} else {
		mask = 0x0F;
	}
	
	// checks if the desired position is in 0..5
	if (pos < 0 || pos > 5) {
  dc:	06 97       	sbiw	r24, 0x06	; 6
  de:	00 f5       	brcc	.+64     	; 0x120 <writeChar+0x96>
		} else {
		return;
	}
	
	// get the scc value from our scc table
	sccChar = SCCTable[number];
  e0:	ee 0f       	add	r30, r30
  e2:	ff 0b       	sbc	r31, r31
  e4:	ec 0f       	add	r30, r28
  e6:	fd 1f       	adc	r31, r29
  e8:	41 81       	ldd	r20, Z+1	; 0x01
  ea:	52 81       	ldd	r21, Z+2	; 0x02
	if (pos < 0 || pos > 5) {
		return;
	}
	
	// 5, 4 >> LCDDR2 and 3, 2 >> LCDDR1 and 1, 0 >> LCDDR0
	lcddr += pos >> 1;
  ec:	75 95       	asr	r23
  ee:	67 95       	ror	r22
  f0:	76 2f       	mov	r23, r22
  f2:	64 51       	subi	r22, 0x14	; 20
	
	// use our 4 nibbles to show the desired number at the desired position
	for (int i = 0; i < 4; i++) {
		nibble = sccChar & 0x000f;
  f4:	84 2f       	mov	r24, r20
  f6:	8f 70       	andi	r24, 0x0F	; 15
		sccChar = sccChar >> 4;
  f8:	52 95       	swap	r21
  fa:	42 95       	swap	r20
  fc:	4f 70       	andi	r20, 0x0F	; 15
  fe:	45 27       	eor	r20, r21
 100:	5f 70       	andi	r21, 0x0F	; 15
 102:	45 27       	eor	r20, r21
		
		// shift nibble left 4 times if pos is uneven because then mask = 0x0F
		if (pos % 2 != 0) {
 104:	21 15       	cp	r18, r1
 106:	31 05       	cpc	r19, r1
 108:	11 f0       	breq	.+4      	; 0x10e <writeChar+0x84>
			nibble = nibble << 4;
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
		}

		// use the nibble and the mask to light the parts that nibble says
		_SFR_MEM8(lcddr) = (_SFR_MEM8(lcddr) & mask) | nibble;
 10e:	e6 2f       	mov	r30, r22
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	9a 23       	and	r25, r26
 116:	89 2b       	or	r24, r25
 118:	80 83       	st	Z, r24
		lcddr += 5;
 11a:	6b 5f       	subi	r22, 0xFB	; 251
	
	// 5, 4 >> LCDDR2 and 3, 2 >> LCDDR1 and 1, 0 >> LCDDR0
	lcddr += pos >> 1;
	
	// use our 4 nibbles to show the desired number at the desired position
	for (int i = 0; i < 4; i++) {
 11c:	76 13       	cpse	r23, r22
 11e:	ea cf       	rjmp	.-44     	; 0xf4 <writeChar+0x6a>
	}
	
	
	
	
}
 120:	64 96       	adiw	r28, 0x14	; 20
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:



int main(void)
{
	CLKPR = 0x80;
 132:	e1 e6       	ldi	r30, 0x61	; 97
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	80 83       	st	Z, r24
	CLKPR = 0x00;
 13a:	10 82       	st	Z, r1
    /* Replace with your application code */
    while (true) 
    {
		writeChar(3, 4);
 13c:	64 e0       	ldi	r22, 0x04	; 4
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 45 00 	call	0x8a	; 0x8a <writeChar>
 146:	fa cf       	rjmp	.-12     	; 0x13c <main+0xa>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
